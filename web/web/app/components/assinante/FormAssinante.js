/* Assinante´s Form generated by JSetup v0.95 :  at 23 de jun de 2021 23:11:05 */  
import React, { Component } from "react";
import { NavLink } from "react-router-dom";
import { Alert, Button, FormGroup, ControlLabel, FormControl, HelpBlock } from "react-bootstrap";

import HttpRequest from "../core/HttpRequest";
import JSInputField from "../core/JSInputField";
import JSCombobox from "../core/JSCombobox";
import Message from "../core/Message";


import { isEmpty, isNotEmpty } from "../core/JSUtils";

const emptyAssinante = {
	id: '',
	telefone: '',    	
	desconto: '',    	
	dataVencimento: '',    	
	cpf: '',    	
	nome: '',    	
	valorMensalidade: '',    	
	observacao: '',    	
	ativo: '',    	
	foto: '',    	
	celular: '',    	
	rg: '',    	
	dataHoraAssinatura: '',    	
	dataNascimento: '',    	
};

export default class FormAssinante extends React.Component {
    constructor() {
        super();
        this.service = new HttpRequest("/rs/crud/assinantes");
        
        this.state = {
            assinante: emptyAssinante,
		
            message: new Message(),
            showMessage: false,

            validationFields: {
                telefone: {
                    isValid: () => {
                        return isNotEmpty(this.state.assinante.telefone);
                    },
                    message: "Campo Obrigatório!",
                },
                cpf: {
                    isValid: () => {
                        return isNotEmpty(this.state.assinante.cpf);
                    },
                    message: "Campo Obrigatório!",
                },
                nome: {
                    isValid: () => {
                        return isNotEmpty(this.state.assinante.nome);
                    },
                    message: "Campo Obrigatório!",
                },
                rg: {
                    isValid: () => {
                        return isNotEmpty(this.state.assinante.rg);
                    },
                    message: "Campo Obrigatório!",
                },
                dataHoraAssinatura: {
                    isValid: () => {
                        return isNotEmpty(this.state.assinante.dataHoraAssinatura);
                    },
                    message: "Campo Obrigatório!",
                },
            }
        }
    }
    componentDidMount = () => {
    
    }
    getValidationState = (fieldName) => {
        if (this.state.validationFields[fieldName]) {
            if (!(this.state.validationFields[fieldName].isValid())) {
                return "error";
            }
        }
        return null;
    }
    
	getValidationMessage = (fieldName) => {
        const fieldValidator = this.state.validationFields[fieldName];
        if (fieldValidator) {
            return fieldValidator.message;
        }
        return false;
    }
    
    validateField = (fieldName) => {
        const fieldValidator = this.state.validationFields[fieldName];
        if (fieldValidator) {
            return fieldValidator.isValid && fieldValidator.isValid();
        }
        return "";
    }

    submitFormHandle = (clickEvent) => {
        console.log("Salvando o objeto: " + this.state.assinante);
        this.service.save(
            this.state.assinante,
            data => {
                this.assinante = data;
				this.setState({ message: new Message("success", "Success saving Assinante"), showMessage: true })
                this.setState({ assinante: emptyAssinante });

            },
            error => {
                console.error("error saving assinante ", error);
				this.setState({ message: new Message("danger", "Error saving Assinante"), showMessage: true })
            }
        );
    }

    changeFormDateHandle = (name, value) => {
    	const assinante = { ...this.state.assinante };
        assinante[name] = value;
        this.setState({ assinante });
    }

    render = () => {
        return (
            <div className="panel">
                <div className="panel-heading">
                    <h3 className="panel-title">Cadastro de Assinante</h3>
                </div>
                <div className="panel-body">
                    <div className="panel">
                        <div className="panel-body">
                            {this.state.showMessage ?
                                <Alert bsStyle={this.state.message.type} onDismiss={() => { this.setState({ showMessage: false }) }}>
                                    {this.state.message.text}
                                </Alert>
                                
                                : null
                            }                        
                            <form>
                                <FormGroup controlId="telefone" validationState={this.getValidationState("telefone")} >
                                    <ControlLabel>Telefone</ControlLabel>
                                    <JSInputField name="telefone" type="text" value={this.state.assinante.telefone}  onChange={(event) => this.changeFormDateHandle("telefone", event.target.value)} className="form-control" />
                                    <FormControl.Feedback />
                                    <HelpBlock className={this.validateField("telefone") ? "hide" : "block"} >{this.getValidationMessage("telefone")}</HelpBlock>
                                </FormGroup>
                                
                                <FormGroup controlId="desconto" validationState={this.getValidationState("desconto")} >
                                    <ControlLabel>Desconto</ControlLabel>
                                    <JSInputField name="desconto" plugin="decimal" type="text" value={this.state.assinante.desconto}  onChange={(event) => this.changeFormDateHandle("desconto", event.target.value)} className="form-control" />
                                    <FormControl.Feedback />
                                    <HelpBlock className={this.validateField("desconto") ? "hide" : "block"} >{this.getValidationMessage("desconto")}</HelpBlock>
                                </FormGroup>
                                
                                <FormGroup controlId="dataVencimento" validationState={this.getValidationState("dataVencimento")} >
                                    <ControlLabel>Data vencimento</ControlLabel>
                                    <JSInputField name="dataVencimento" plugin="date" type="text" value={this.state.assinante.dataVencimento}  onChange={(event) => this.changeFormDateHandle("dataVencimento", event.target.value)} className="form-control" />
                                    <FormControl.Feedback />
                                    <HelpBlock className={this.validateField("dataVencimento") ? "hide" : "block"} >{this.getValidationMessage("dataVencimento")}</HelpBlock>
                                </FormGroup>
                                
                                <FormGroup controlId="cpf" validationState={this.getValidationState("cpf")} >
                                    <ControlLabel>Cpf</ControlLabel>
                                    <JSInputField name="cpf" type="text" value={this.state.assinante.cpf}  onChange={(event) => this.changeFormDateHandle("cpf", event.target.value)} className="form-control" />
                                    <FormControl.Feedback />
                                    <HelpBlock className={this.validateField("cpf") ? "hide" : "block"} >{this.getValidationMessage("cpf")}</HelpBlock>
                                </FormGroup>
                                
                                <FormGroup controlId="nome" validationState={this.getValidationState("nome")} >
                                    <ControlLabel>Nome</ControlLabel>
                                    <JSInputField name="nome" type="text" value={this.state.assinante.nome}  onChange={(event) => this.changeFormDateHandle("nome", event.target.value)} className="form-control" />
                                    <FormControl.Feedback />
                                    <HelpBlock className={this.validateField("nome") ? "hide" : "block"} >{this.getValidationMessage("nome")}</HelpBlock>
                                </FormGroup>
                                
                                <FormGroup controlId="valorMensalidade" validationState={this.getValidationState("valorMensalidade")} >
                                    <ControlLabel>Valor mensalidade</ControlLabel>
                                    <JSInputField name="valorMensalidade" plugin="decimal" type="text" value={this.state.assinante.valorMensalidade}  onChange={(event) => this.changeFormDateHandle("valorMensalidade", event.target.value)} className="form-control" />
                                    <FormControl.Feedback />
                                    <HelpBlock className={this.validateField("valorMensalidade") ? "hide" : "block"} >{this.getValidationMessage("valorMensalidade")}</HelpBlock>
                                </FormGroup>
                                
                                <FormGroup controlId="observacao" validationState={this.getValidationState("observacao")} >
                                    <ControlLabel>Observação</ControlLabel>
                                    <JSInputField name="observacao" type="text" value={this.state.assinante.observacao}  onChange={(event) => this.changeFormDateHandle("observacao", event.target.value)} className="form-control" />
                                    <FormControl.Feedback />
                                    <HelpBlock className={this.validateField("observacao") ? "hide" : "block"} >{this.getValidationMessage("observacao")}</HelpBlock>
                                </FormGroup>
                                
                                <FormGroup controlId="ativo" validationState={this.getValidationState("ativo")} >
                                    <ControlLabel>Ativo</ControlLabel>
                                    <JSInputField name="ativo" type="text" value={this.state.assinante.ativo}  onChange={(event) => this.changeFormDateHandle("ativo", event.target.value)} className="form-control" />
                                    <FormControl.Feedback />
                                    <HelpBlock className={this.validateField("ativo") ? "hide" : "block"} >{this.getValidationMessage("ativo")}</HelpBlock>
                                </FormGroup>
                                
                                <FormGroup controlId="foto" validationState={this.getValidationState("foto")} >
                                    <ControlLabel>Foto</ControlLabel>
                                    <JSInputField name="foto" type="text" value={this.state.assinante.foto}  onChange={(event) => this.changeFormDateHandle("foto", event.target.value)} className="form-control" />
                                    <FormControl.Feedback />
                                    <HelpBlock className={this.validateField("foto") ? "hide" : "block"} >{this.getValidationMessage("foto")}</HelpBlock>
                                </FormGroup>
                                
                                <FormGroup controlId="celular" validationState={this.getValidationState("celular")} >
                                    <ControlLabel>Celular</ControlLabel>
                                    <JSInputField name="celular" type="text" value={this.state.assinante.celular}  onChange={(event) => this.changeFormDateHandle("celular", event.target.value)} className="form-control" />
                                    <FormControl.Feedback />
                                    <HelpBlock className={this.validateField("celular") ? "hide" : "block"} >{this.getValidationMessage("celular")}</HelpBlock>
                                </FormGroup>
                                
                                <FormGroup controlId="rg" validationState={this.getValidationState("rg")} >
                                    <ControlLabel>Rg</ControlLabel>
                                    <JSInputField name="rg" type="text" value={this.state.assinante.rg}  onChange={(event) => this.changeFormDateHandle("rg", event.target.value)} className="form-control" />
                                    <FormControl.Feedback />
                                    <HelpBlock className={this.validateField("rg") ? "hide" : "block"} >{this.getValidationMessage("rg")}</HelpBlock>
                                </FormGroup>
                                
                                <FormGroup controlId="dataHoraAssinatura" validationState={this.getValidationState("dataHoraAssinatura")} >
                                    <ControlLabel>Data hora assinatura</ControlLabel>
                                    <JSInputField name="dataHoraAssinatura" plugin="datetime" type="text" value={this.state.assinante.dataHoraAssinatura}  onChange={(event) => this.changeFormDateHandle("dataHoraAssinatura", event.target.value)} className="form-control" />
                                    <FormControl.Feedback />
                                    <HelpBlock className={this.validateField("dataHoraAssinatura") ? "hide" : "block"} >{this.getValidationMessage("dataHoraAssinatura")}</HelpBlock>
                                </FormGroup>
                                
                                <FormGroup controlId="dataNascimento" validationState={this.getValidationState("dataNascimento")} >
                                    <ControlLabel>Data de Nascimento</ControlLabel>
                                    <JSInputField name="dataNascimento" plugin="date" type="text" value={this.state.assinante.dataNascimento}  onChange={(event) => this.changeFormDateHandle("dataNascimento", event.target.value)} className="form-control" />
                                    <FormControl.Feedback />
                                    <HelpBlock className={this.validateField("dataNascimento") ? "hide" : "block"} >{this.getValidationMessage("dataNascimento")}</HelpBlock>
                                </FormGroup>
                                
                            </form>
                        </div>
                    </div >
                    <div >
                        <div className="clearfix form-actions">
                            <button onClick={this.submitFormHandle} className="btn btn-primary btn-lg " >
                                <i className="fa fa-check " />
                                &nbsp; Salvar
                            </button>
                            &nbsp;
                            <button onClick={this.handleClick} className="btn btn-primary btn-lg ">
                                <i className="fa fa-check " />
                                &nbsp; Salvar e continuar
                            </button>
                            &nbsp;
                            
                            <NavLink to="/assinantes/list" className="btn-lg btn btn-light">
								<i className=" fa fa-undo " />
                                &nbsp; Voltar para a listagem
                             </NavLink>
                        </div >
                    </div >
                </div >
            </div >
        )
    }
}

