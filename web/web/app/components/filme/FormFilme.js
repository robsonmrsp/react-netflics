/* Filme´s Form generated by JSetup v0.95 :  at 23 de jun de 2021 23:11:05 */  
import React, { Component } from "react";
import { NavLink } from "react-router-dom";
import { Alert, Button, FormGroup, ControlLabel, FormControl, HelpBlock } from "react-bootstrap";

import HttpRequest from "../core/HttpRequest";
import JSInputField from "../core/JSInputField";
import JSCombobox from "../core/JSCombobox";
import Message from "../core/Message";

import ModalClassificacao from "../classificacao/ModalClassificacao";

import { isEmpty, isNotEmpty } from "../core/JSUtils";

const emptyFilme = {
	id: '',
	tituloOriginal: '',    	
	poster: '',    	
	duracao: '',    	
	dataLancamento: '',    	
	sinopse: '',    	
	titulo: '',    	
	diretor: '',    	
};

export default class FormFilme extends React.Component {
    constructor() {
        super();
        this.service = new HttpRequest("/rs/crud/filmes");
        this.serviceLinguagem = new HttpRequest("/rs/crud/linguagems");
        
        this.state = {
            filme: emptyFilme,
			linguagemList: [],
		
            message: new Message(),
            showMessage: false,

            validationFields: {
                tituloOriginal: {
                    isValid: () => {
                        return isNotEmpty(this.state.filme.tituloOriginal);
                    },
                    message: "Campo Obrigatório!",
                },
                dataLancamento: {
                    isValid: () => {
                        return isNotEmpty(this.state.filme.dataLancamento);
                    },
                    message: "Campo Obrigatório!",
                },
                sinopse: {
                    isValid: () => {
                        return isNotEmpty(this.state.filme.sinopse);
                    },
                    message: "Campo Obrigatório!",
                },
            }
        }
    }
    componentDidMount = () => {
        this.serviceLinguagem.getAll(
            linguagemList => {
                this.setState({ linguagemList  });
            },
            error => {
                console.error("error fetching forr combobox", error);
            }
        );
    
    }
    getValidationState = (fieldName) => {
        if (this.state.validationFields[fieldName]) {
            if (!(this.state.validationFields[fieldName].isValid())) {
                return "error";
            }
        }
        return null;
    }
    
	getValidationMessage = (fieldName) => {
        const fieldValidator = this.state.validationFields[fieldName];
        if (fieldValidator) {
            return fieldValidator.message;
        }
        return false;
    }
    
    validateField = (fieldName) => {
        const fieldValidator = this.state.validationFields[fieldName];
        if (fieldValidator) {
            return fieldValidator.isValid && fieldValidator.isValid();
        }
        return "";
    }

    submitFormHandle = (clickEvent) => {
        console.log("Salvando o objeto: " + this.state.filme);
        this.service.save(
            this.state.filme,
            data => {
                this.filme = data;
				this.setState({ message: new Message("success", "Success saving Filme"), showMessage: true })
                this.setState({ filme: emptyFilme });

            },
            error => {
                console.error("error saving filme ", error);
				this.setState({ message: new Message("danger", "Error saving Filme"), showMessage: true })
            }
        );
    }

    changeFormDateHandle = (name, value) => {
    	const filme = { ...this.state.filme };
        filme[name] = value;
        this.setState({ filme });
    }

    render = () => {
        return (
            <div className="panel">
                <div className="panel-heading">
                    <h3 className="panel-title">Cadastro de Filme</h3>
                </div>
                <div className="panel-body">
                    <div className="panel">
                        <div className="panel-body">
                            {this.state.showMessage ?
                                <Alert bsStyle={this.state.message.type} onDismiss={() => { this.setState({ showMessage: false }) }}>
                                    {this.state.message.text}
                                </Alert>
                                
                                : null
                            }                        
                            <form>
                                <FormGroup controlId="tituloOriginal" validationState={this.getValidationState("tituloOriginal")} >
                                    <ControlLabel>Título Original</ControlLabel>
                                    <JSInputField name="tituloOriginal" type="text" value={this.state.filme.tituloOriginal}  onChange={(event) => this.changeFormDateHandle("tituloOriginal", event.target.value)} className="form-control" />
                                    <FormControl.Feedback />
                                    <HelpBlock className={this.validateField("tituloOriginal") ? "hide" : "block"} >{this.getValidationMessage("tituloOriginal")}</HelpBlock>
                                </FormGroup>
                                
                                <FormGroup controlId="poster" validationState={this.getValidationState("poster")} >
                                    <ControlLabel>Poster</ControlLabel>
                                    <JSInputField name="poster" type="text" value={this.state.filme.poster}  onChange={(event) => this.changeFormDateHandle("poster", event.target.value)} className="form-control" />
                                    <FormControl.Feedback />
                                    <HelpBlock className={this.validateField("poster") ? "hide" : "block"} >{this.getValidationMessage("poster")}</HelpBlock>
                                </FormGroup>
                                
                                <FormGroup controlId="duracao" validationState={this.getValidationState("duracao")} >
                                    <ControlLabel>Duração</ControlLabel>
                                    <JSInputField name="duracao" plugin="integer" type="text" value={this.state.filme.duracao}  onChange={(event) => this.changeFormDateHandle("duracao", event.target.value)} className="form-control" />
                                    <FormControl.Feedback />
                                    <HelpBlock className={this.validateField("duracao") ? "hide" : "block"} >{this.getValidationMessage("duracao")}</HelpBlock>
                                </FormGroup>
                                
                                <FormGroup controlId="dataLancamento" validationState={this.getValidationState("dataLancamento")} >
                                    <ControlLabel>Data do Lançamento</ControlLabel>
                                    <JSInputField name="dataLancamento" plugin="date" type="text" value={this.state.filme.dataLancamento}  onChange={(event) => this.changeFormDateHandle("dataLancamento", event.target.value)} className="form-control" />
                                    <FormControl.Feedback />
                                    <HelpBlock className={this.validateField("dataLancamento") ? "hide" : "block"} >{this.getValidationMessage("dataLancamento")}</HelpBlock>
                                </FormGroup>
                                
                                <FormGroup controlId="sinopse" validationState={this.getValidationState("sinopse")} >
                                    <ControlLabel>Sinopse</ControlLabel>
                                    <JSInputField name="sinopse" type="text" value={this.state.filme.sinopse}  onChange={(event) => this.changeFormDateHandle("sinopse", event.target.value)} className="form-control" />
                                    <FormControl.Feedback />
                                    <HelpBlock className={this.validateField("sinopse") ? "hide" : "block"} >{this.getValidationMessage("sinopse")}</HelpBlock>
                                </FormGroup>
                                
                                <FormGroup controlId="titulo" validationState={this.getValidationState("titulo")} >
                                    <ControlLabel>Título</ControlLabel>
                                    <JSInputField name="titulo" type="text" value={this.state.filme.titulo}  onChange={(event) => this.changeFormDateHandle("titulo", event.target.value)} className="form-control" />
                                    <FormControl.Feedback />
                                    <HelpBlock className={this.validateField("titulo") ? "hide" : "block"} >{this.getValidationMessage("titulo")}</HelpBlock>
                                </FormGroup>
                                
                                <FormGroup controlId="diretor" validationState={this.getValidationState("diretor")} >
                                    <ControlLabel>Diretor</ControlLabel>
                                    <JSInputField name="diretor" type="text" value={this.state.filme.diretor}  onChange={(event) => this.changeFormDateHandle("diretor", event.target.value)} className="form-control" />
                                    <FormControl.Feedback />
                                    <HelpBlock className={this.validateField("diretor") ? "hide" : "block"} >{this.getValidationMessage("diretor")}</HelpBlock>
                                </FormGroup>
                                
		                        <FormGroup controlId="titulo" validationState={this.getValidationState("classificacao")} >
		                            <ControlLabel>Classificação</ControlLabel>
		                            <FormControl.Feedback />
									<ModalClassificacao value={this.state.filme.classificacao} displayValue="nome" idValue="id" onChange={(event) => this.changeFormDateHandle("classificacao", event.target.value)}  />
		                            <HelpBlock className={this.validateField("classificacao") ? "hide" : "block"} >{this.getValidationMessage("classificacao")}</HelpBlock>
		                        </FormGroup>
		                              					
		                        <FormGroup controlId="titulo" validationState={this.getValidationState("linguagem")} >
		                            <ControlLabel>Linguagem</ControlLabel>
		                            <FormControl.Feedback />
		                            <JSCombobox value={this.state.filme.linguagem} values={this.state.linguagemList} displayValue="nome" idValue="id" onChange={(event) => this.changeFormDateHandle("linguagem", event.target.value)} className="form-control" />
		                            <HelpBlock className={this.validateField("linguagem") ? "hide" : "block"} >{this.getValidationMessage("linguagem")}</HelpBlock>
		                        </FormGroup>      	
		                        				
                            </form>
                        </div>
                    </div >
                    <div >
                        <div className="clearfix form-actions">
                            <button onClick={this.submitFormHandle} className="btn btn-primary btn-lg " >
                                <i className="fa fa-check " />
                                &nbsp; Salvar
                            </button>
                            &nbsp;
                            <button onClick={this.handleClick} className="btn btn-primary btn-lg ">
                                <i className="fa fa-check " />
                                &nbsp; Salvar e continuar
                            </button>
                            &nbsp;
                            
                            <NavLink to="/filmes/list" className="btn-lg btn btn-light">
								<i className=" fa fa-undo " />
                                &nbsp; Voltar para a listagem
                             </NavLink>
                        </div >
                    </div >
                </div >
            </div >
        )
    }
}

