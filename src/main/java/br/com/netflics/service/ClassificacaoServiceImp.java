/* generated by JSetup v0.95 :  at 23 de jun de 2021 23:11:06 */
package br.com.netflics.service;

import java.util.Optional;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import br.com.netflics.core.model.Tenant ;

import br.com.netflics.model.Classificacao;
import br.com.netflics.persistence.ClassificacaoRepository;
import br.com.netflics.persistence.ClassificacaoSpecificationHelper;
import br.com.netflics.model.filter.FilterClassificacao;

import br.com.netflics.core.persistence.pagination.Pager;
import br.com.netflics.core.rs.exception.ValidationException;
import br.com.netflics.core.persistence.pagination.SearchParameters;
import br.com.netflics.core.utils.DateUtil;
import br.com.netflics.core.utils.Util;

@Service
@Transactional
public class ClassificacaoServiceImp implements ClassificacaoService {

	public static final Logger LOGGER = LoggerFactory.getLogger(ClassificacaoServiceImp.class);
	
	@Autowired
	ClassificacaoRepository classificacaoRepository;
	
	public Optional<Classificacao> get(Integer id, Tenant tenant) {
		return classificacaoRepository.findOne(ClassificacaoSpecificationHelper.fromId(id, tenant));
	}

	public Pager<Classificacao> get(SearchParameters<FilterClassificacao> searchParams, Tenant tenant) {
		Pageable pageRequest = searchParams.getPageRequest();

		Page<Classificacao> page = classificacaoRepository.findAll(ClassificacaoSpecificationHelper.filter(searchParams, tenant), pageRequest);

		return new Pager<Classificacao>(page.getContent(), searchParams.getPage(), searchParams.getPageSize(),
		        searchParams.getOrder(), searchParams.getOrderBy(), page.getTotalElements());
	}

	public Boolean delete(Integer id, Tenant tenant) {
		Optional<Classificacao> optional = this.get(id, tenant);
		if (optional.isPresent()) {
			classificacaoRepository.delete(optional.get());
		}
		return true;
	}

	public Classificacao save(Classificacao entity) {
		return classificacaoRepository.save(entity);
	}

	public Classificacao update(Classificacao entity) {
		return classificacaoRepository.save(entity);
	}
}

//generated by JSetup v0.95 :  at 23 de jun de 2021 23:11:06