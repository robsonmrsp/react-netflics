package br.com.netflics.utils;

import java.util.ArrayList;

import java.util.List;


import br.com.netflics.core.utils.DateUtil;

import br.com.netflics.json.JsonLinguagem;
import br.com.netflics.model.Linguagem;
import br.com.netflics.json.JsonAvaliacao;
import br.com.netflics.model.Avaliacao;
import br.com.netflics.json.JsonAssinante;
import br.com.netflics.model.Assinante;
import br.com.netflics.json.JsonGenero;
import br.com.netflics.model.Genero;
import br.com.netflics.json.JsonCritico;
import br.com.netflics.model.Critico;
import br.com.netflics.json.JsonFilme;
import br.com.netflics.model.Filme;
import br.com.netflics.json.JsonVisualizacao;
import br.com.netflics.model.Visualizacao;
import br.com.netflics.json.JsonClassificacao;
import br.com.netflics.model.Classificacao;
import br.com.netflics.json.JsonAtor;
import br.com.netflics.model.Ator;
import br.com.netflics.json.JsonUser;
import br.com.netflics.model.User;
import br.com.netflics.json.JsonRole;
import br.com.netflics.model.Role;
import br.com.netflics.json.JsonPermission;
import br.com.netflics.model.Permission;
import br.com.netflics.json.JsonGroup;
import br.com.netflics.model.Group;
import br.com.netflics.json.JsonItem;
import br.com.netflics.model.Item;
import br.com.netflics.model.User;
import br.com.netflics.json.JsonUser;

/* generated by JSetup v0.95 :  at 23 de jun de 2021 23:11:06 */
public class Parser {

	//converte de entidade para json --------------------
	private static JsonLinguagem toBasicJson(Linguagem linguagem) {
		JsonLinguagem jsonLinguagem = new JsonLinguagem();
		applyBasicJsonValues(jsonLinguagem, linguagem);
		return jsonLinguagem;
	}
	
	private static Linguagem toBasicEntity(JsonLinguagem jsonLinguagem) {
		Linguagem linguagem = new Linguagem();
		applyBasicEntityValues(linguagem, jsonLinguagem);
		return linguagem;
	}
	
	private static void applyBasicJsonValues(JsonLinguagem jsonLinguagem, Linguagem linguagem) {
		jsonLinguagem.setId(linguagem.getId());
	    jsonLinguagem.setNome(linguagem.getNome());
	}	
	private static void applyBasicEntityValues(Linguagem linguagem, JsonLinguagem jsonLinguagem) {
		linguagem.setId(jsonLinguagem.getId());
		linguagem.setNome(jsonLinguagem.getNome());
	}	
	
	public static JsonLinguagem toJson(Linguagem linguagem) {
		if(linguagem == null){
			return null;
		}
		
		JsonLinguagem jsonLinguagem = new JsonLinguagem();
		
		applyBasicJsonValues(jsonLinguagem, linguagem);

		return jsonLinguagem;
	}


	public static Linguagem apply(Linguagem linguagem, JsonLinguagem jsonLinguagem) {
	
		if(linguagem ==  null)
			linguagem = new Linguagem();
		
		applyBasicEntityValues(linguagem, jsonLinguagem) ;

		return linguagem;
		
	}		
	public static Linguagem toEntity(JsonLinguagem jsonLinguagem) {
		Linguagem linguagem = new Linguagem();
		
		return apply(linguagem, jsonLinguagem);
	}		
	
	public static List<JsonLinguagem> toListJsonLinguagems(List<Linguagem> all) {
		List<JsonLinguagem> jsonLinguagems = new ArrayList<JsonLinguagem>();
		for (Linguagem linguagem : all) {
			jsonLinguagems.add(toJson(linguagem));
		}
		return jsonLinguagems;
	}
	//converte de entidade para json --------------------
	private static JsonAvaliacao toBasicJson(Avaliacao avaliacao) {
		JsonAvaliacao jsonAvaliacao = new JsonAvaliacao();
		applyBasicJsonValues(jsonAvaliacao, avaliacao);
		return jsonAvaliacao;
	}
	
	private static Avaliacao toBasicEntity(JsonAvaliacao jsonAvaliacao) {
		Avaliacao avaliacao = new Avaliacao();
		applyBasicEntityValues(avaliacao, jsonAvaliacao);
		return avaliacao;
	}
	
	private static void applyBasicJsonValues(JsonAvaliacao jsonAvaliacao, Avaliacao avaliacao) {
		jsonAvaliacao.setId(avaliacao.getId());
	    jsonAvaliacao.setDataHora(avaliacao.getDataHora());
	}	
	private static void applyBasicEntityValues(Avaliacao avaliacao, JsonAvaliacao jsonAvaliacao) {
		avaliacao.setId(jsonAvaliacao.getId());
		avaliacao.setDataHora(jsonAvaliacao.getDataHora());
	}	
	
	public static JsonAvaliacao toJson(Avaliacao avaliacao) {
		if(avaliacao == null){
			return null;
		}
		
		JsonAvaliacao jsonAvaliacao = new JsonAvaliacao();
		
		applyBasicJsonValues(jsonAvaliacao, avaliacao);

		Filme filme_ = avaliacao.getFilme();
		if (filme_ != null) {
			jsonAvaliacao.setFilme(toBasicJson(filme_));
		}
		Critico critico_ = avaliacao.getCritico();
		if (critico_ != null) {
			jsonAvaliacao.setCritico(toBasicJson(critico_));
		}
		return jsonAvaliacao;
	}


	public static Avaliacao apply(Avaliacao avaliacao, JsonAvaliacao jsonAvaliacao) {
	
		if(avaliacao ==  null)
			avaliacao = new Avaliacao();
		
		applyBasicEntityValues(avaliacao, jsonAvaliacao) ;

		JsonFilme filme_ = jsonAvaliacao.getFilme();
		if (filme_ != null) {
			avaliacao.setFilme(toBasicEntity(filme_));
		}	
		JsonCritico critico_ = jsonAvaliacao.getCritico();
		if (critico_ != null) {
			avaliacao.setCritico(toBasicEntity(critico_));
		}	
		return avaliacao;
		
	}		
	public static Avaliacao toEntity(JsonAvaliacao jsonAvaliacao) {
		Avaliacao avaliacao = new Avaliacao();
		
		return apply(avaliacao, jsonAvaliacao);
	}		
	
	public static List<JsonAvaliacao> toListJsonAvaliacaos(List<Avaliacao> all) {
		List<JsonAvaliacao> jsonAvaliacaos = new ArrayList<JsonAvaliacao>();
		for (Avaliacao avaliacao : all) {
			jsonAvaliacaos.add(toJson(avaliacao));
		}
		return jsonAvaliacaos;
	}
	//converte de entidade para json --------------------
	private static JsonAssinante toBasicJson(Assinante assinante) {
		JsonAssinante jsonAssinante = new JsonAssinante();
		applyBasicJsonValues(jsonAssinante, assinante);
		return jsonAssinante;
	}
	
	private static Assinante toBasicEntity(JsonAssinante jsonAssinante) {
		Assinante assinante = new Assinante();
		applyBasicEntityValues(assinante, jsonAssinante);
		return assinante;
	}
	
	private static void applyBasicJsonValues(JsonAssinante jsonAssinante, Assinante assinante) {
		jsonAssinante.setId(assinante.getId());
	    jsonAssinante.setTelefone(assinante.getTelefone());
	    jsonAssinante.setDesconto(assinante.getDesconto());
	    jsonAssinante.setDataVencimento(assinante.getDataVencimento());
	    jsonAssinante.setCpf(assinante.getCpf());
	    jsonAssinante.setNome(assinante.getNome());
	    jsonAssinante.setValorMensalidade(assinante.getValorMensalidade());
	    jsonAssinante.setObservacao(assinante.getObservacao());
	    jsonAssinante.setAtivo(assinante.getAtivo());
	    jsonAssinante.setFoto(assinante.getFoto());
	    jsonAssinante.setCelular(assinante.getCelular());
	    jsonAssinante.setRg(assinante.getRg());
	    jsonAssinante.setDataHoraAssinatura(assinante.getDataHoraAssinatura());
	    jsonAssinante.setDataNascimento(assinante.getDataNascimento());
	}	
	private static void applyBasicEntityValues(Assinante assinante, JsonAssinante jsonAssinante) {
		assinante.setId(jsonAssinante.getId());
		assinante.setTelefone(jsonAssinante.getTelefone());
		assinante.setDesconto(jsonAssinante.getDesconto());
		assinante.setDataVencimento(jsonAssinante.getDataVencimento());
		assinante.setCpf(jsonAssinante.getCpf());
		assinante.setNome(jsonAssinante.getNome());
		assinante.setValorMensalidade(jsonAssinante.getValorMensalidade());
		assinante.setObservacao(jsonAssinante.getObservacao());
		assinante.setAtivo(jsonAssinante.getAtivo());
		assinante.setFoto(jsonAssinante.getFoto());
		assinante.setCelular(jsonAssinante.getCelular());
		assinante.setRg(jsonAssinante.getRg());
		assinante.setDataHoraAssinatura(jsonAssinante.getDataHoraAssinatura());
		assinante.setDataNascimento(jsonAssinante.getDataNascimento());
	}	
	
	public static JsonAssinante toJson(Assinante assinante) {
		if(assinante == null){
			return null;
		}
		
		JsonAssinante jsonAssinante = new JsonAssinante();
		
		applyBasicJsonValues(jsonAssinante, assinante);

		List<Filme> listMinhaLista = assinante.getMinhaLista();
		if (listMinhaLista != null) {
			for (Filme loopFilme : listMinhaLista) {
				jsonAssinante.getMinhaLista().add(toBasicJson(loopFilme));
			}
		}
		return jsonAssinante;
	}


	public static Assinante apply(Assinante assinante, JsonAssinante jsonAssinante) {
	
		if(assinante ==  null)
			assinante = new Assinante();
		
		applyBasicEntityValues(assinante, jsonAssinante) ;

		ArrayList<JsonFilme> listMinhaLista = jsonAssinante.getMinhaLista();
		if (listMinhaLista != null) {
			for (JsonFilme loopJsonFilme : listMinhaLista) {
				assinante.addMinhaLista(toBasicEntity(loopJsonFilme));
			}
		}
					
		return assinante;
		
	}		
	public static Assinante toEntity(JsonAssinante jsonAssinante) {
		Assinante assinante = new Assinante();
		
		return apply(assinante, jsonAssinante);
	}		
	
	public static List<JsonAssinante> toListJsonAssinantes(List<Assinante> all) {
		List<JsonAssinante> jsonAssinantes = new ArrayList<JsonAssinante>();
		for (Assinante assinante : all) {
			jsonAssinantes.add(toJson(assinante));
		}
		return jsonAssinantes;
	}
	//converte de entidade para json --------------------
	private static JsonGenero toBasicJson(Genero genero) {
		JsonGenero jsonGenero = new JsonGenero();
		applyBasicJsonValues(jsonGenero, genero);
		return jsonGenero;
	}
	
	private static Genero toBasicEntity(JsonGenero jsonGenero) {
		Genero genero = new Genero();
		applyBasicEntityValues(genero, jsonGenero);
		return genero;
	}
	
	private static void applyBasicJsonValues(JsonGenero jsonGenero, Genero genero) {
		jsonGenero.setId(genero.getId());
	    jsonGenero.setNome(genero.getNome());
	    jsonGenero.setDescricao(genero.getDescricao());
	}	
	private static void applyBasicEntityValues(Genero genero, JsonGenero jsonGenero) {
		genero.setId(jsonGenero.getId());
		genero.setNome(jsonGenero.getNome());
		genero.setDescricao(jsonGenero.getDescricao());
	}	
	
	public static JsonGenero toJson(Genero genero) {
		if(genero == null){
			return null;
		}
		
		JsonGenero jsonGenero = new JsonGenero();
		
		applyBasicJsonValues(jsonGenero, genero);

		return jsonGenero;
	}


	public static Genero apply(Genero genero, JsonGenero jsonGenero) {
	
		if(genero ==  null)
			genero = new Genero();
		
		applyBasicEntityValues(genero, jsonGenero) ;

		return genero;
		
	}		
	public static Genero toEntity(JsonGenero jsonGenero) {
		Genero genero = new Genero();
		
		return apply(genero, jsonGenero);
	}		
	
	public static List<JsonGenero> toListJsonGeneros(List<Genero> all) {
		List<JsonGenero> jsonGeneros = new ArrayList<JsonGenero>();
		for (Genero genero : all) {
			jsonGeneros.add(toJson(genero));
		}
		return jsonGeneros;
	}
	//converte de entidade para json --------------------
	private static JsonCritico toBasicJson(Critico critico) {
		JsonCritico jsonCritico = new JsonCritico();
		applyBasicJsonValues(jsonCritico, critico);
		return jsonCritico;
	}
	
	private static Critico toBasicEntity(JsonCritico jsonCritico) {
		Critico critico = new Critico();
		applyBasicEntityValues(critico, jsonCritico);
		return critico;
	}
	
	private static void applyBasicJsonValues(JsonCritico jsonCritico, Critico critico) {
		jsonCritico.setId(critico.getId());
	    jsonCritico.setNome(critico.getNome());
	    jsonCritico.setEmpresa(critico.getEmpresa());
	}	
	private static void applyBasicEntityValues(Critico critico, JsonCritico jsonCritico) {
		critico.setId(jsonCritico.getId());
		critico.setNome(jsonCritico.getNome());
		critico.setEmpresa(jsonCritico.getEmpresa());
	}	
	
	public static JsonCritico toJson(Critico critico) {
		if(critico == null){
			return null;
		}
		
		JsonCritico jsonCritico = new JsonCritico();
		
		applyBasicJsonValues(jsonCritico, critico);

		return jsonCritico;
	}


	public static Critico apply(Critico critico, JsonCritico jsonCritico) {
	
		if(critico ==  null)
			critico = new Critico();
		
		applyBasicEntityValues(critico, jsonCritico) ;

		return critico;
		
	}		
	public static Critico toEntity(JsonCritico jsonCritico) {
		Critico critico = new Critico();
		
		return apply(critico, jsonCritico);
	}		
	
	public static List<JsonCritico> toListJsonCriticos(List<Critico> all) {
		List<JsonCritico> jsonCriticos = new ArrayList<JsonCritico>();
		for (Critico critico : all) {
			jsonCriticos.add(toJson(critico));
		}
		return jsonCriticos;
	}
	//converte de entidade para json --------------------
	private static JsonFilme toBasicJson(Filme filme) {
		JsonFilme jsonFilme = new JsonFilme();
		applyBasicJsonValues(jsonFilme, filme);
		return jsonFilme;
	}
	
	private static Filme toBasicEntity(JsonFilme jsonFilme) {
		Filme filme = new Filme();
		applyBasicEntityValues(filme, jsonFilme);
		return filme;
	}
	
	private static void applyBasicJsonValues(JsonFilme jsonFilme, Filme filme) {
		jsonFilme.setId(filme.getId());
	    jsonFilme.setTituloOriginal(filme.getTituloOriginal());
	    jsonFilme.setPoster(filme.getPoster());
	    jsonFilme.setDuracao(filme.getDuracao());
	    jsonFilme.setDataLancamento(filme.getDataLancamento());
	    jsonFilme.setSinopse(filme.getSinopse());
	    jsonFilme.setTitulo(filme.getTitulo());
	    jsonFilme.setDiretor(filme.getDiretor());
	}	
	private static void applyBasicEntityValues(Filme filme, JsonFilme jsonFilme) {
		filme.setId(jsonFilme.getId());
		filme.setTituloOriginal(jsonFilme.getTituloOriginal());
		filme.setPoster(jsonFilme.getPoster());
		filme.setDuracao(jsonFilme.getDuracao());
		filme.setDataLancamento(jsonFilme.getDataLancamento());
		filme.setSinopse(jsonFilme.getSinopse());
		filme.setTitulo(jsonFilme.getTitulo());
		filme.setDiretor(jsonFilme.getDiretor());
	}	
	
	public static JsonFilme toJson(Filme filme) {
		if(filme == null){
			return null;
		}
		
		JsonFilme jsonFilme = new JsonFilme();
		
		applyBasicJsonValues(jsonFilme, filme);

		Classificacao classificacao_ = filme.getClassificacao();
		if (classificacao_ != null) {
			jsonFilme.setClassificacao(toBasicJson(classificacao_));
		}
		List<Genero> listGenero = filme.getGenero();
		if (listGenero != null) {
			for (Genero loopGenero : listGenero) {
				jsonFilme.getGenero().add(toBasicJson(loopGenero));
			}
		}
		List<Ator> listElenco = filme.getElenco();
		if (listElenco != null) {
			for (Ator loopAtor : listElenco) {
				jsonFilme.getElenco().add(toBasicJson(loopAtor));
			}
		}			

		Linguagem linguagem_ = filme.getLinguagem();
		if (linguagem_ != null) {
			jsonFilme.setLinguagem(toBasicJson(linguagem_));
		}
		List<Avaliacao> listAvaliacoes = filme.getAvaliacoes();
		if (listAvaliacoes != null) {
			for (Avaliacao loopAvaliacao : listAvaliacoes) {
				jsonFilme.getAvaliacoes().add(toBasicJson(loopAvaliacao));
			}
		}
		return jsonFilme;
	}


	public static Filme apply(Filme filme, JsonFilme jsonFilme) {
	
		if(filme ==  null)
			filme = new Filme();
		
		applyBasicEntityValues(filme, jsonFilme) ;

		JsonClassificacao classificacao_ = jsonFilme.getClassificacao();
		if (classificacao_ != null) {
			filme.setClassificacao(toBasicEntity(classificacao_));
		}	
		ArrayList<JsonGenero> listGenero = jsonFilme.getGenero();
		if (listGenero != null) {
			for (JsonGenero loopJsonGenero : listGenero) {
				filme.addGenero(toBasicEntity(loopJsonGenero));
			}
		}
					
		ArrayList<JsonAtor> listElenco = jsonFilme.getElenco();			
		if (listElenco != null) {
			for (JsonAtor loopJsonAtor : listElenco) {
				filme.addElenco(toBasicEntity(loopJsonAtor));
			}
		}
			
		JsonLinguagem linguagem_ = jsonFilme.getLinguagem();
		if (linguagem_ != null) {
			filme.setLinguagem(toBasicEntity(linguagem_));
		}	
		ArrayList<JsonAvaliacao> listAvaliacoes = jsonFilme.getAvaliacoes();
		if (listAvaliacoes != null) {
			for (JsonAvaliacao loopJsonAvaliacao : listAvaliacoes) {
				filme.addAvaliacoes(toBasicEntity(loopJsonAvaliacao));
			}
		}
					
		return filme;
		
	}		
	public static Filme toEntity(JsonFilme jsonFilme) {
		Filme filme = new Filme();
		
		return apply(filme, jsonFilme);
	}		
	
	public static List<JsonFilme> toListJsonFilmes(List<Filme> all) {
		List<JsonFilme> jsonFilmes = new ArrayList<JsonFilme>();
		for (Filme filme : all) {
			jsonFilmes.add(toJson(filme));
		}
		return jsonFilmes;
	}
	//converte de entidade para json --------------------
	private static JsonVisualizacao toBasicJson(Visualizacao visualizacao) {
		JsonVisualizacao jsonVisualizacao = new JsonVisualizacao();
		applyBasicJsonValues(jsonVisualizacao, visualizacao);
		return jsonVisualizacao;
	}
	
	private static Visualizacao toBasicEntity(JsonVisualizacao jsonVisualizacao) {
		Visualizacao visualizacao = new Visualizacao();
		applyBasicEntityValues(visualizacao, jsonVisualizacao);
		return visualizacao;
	}
	
	private static void applyBasicJsonValues(JsonVisualizacao jsonVisualizacao, Visualizacao visualizacao) {
		jsonVisualizacao.setId(visualizacao.getId());
	    jsonVisualizacao.setDataHora(visualizacao.getDataHora());
	    jsonVisualizacao.setPercentualAssistido(visualizacao.getPercentualAssistido());
	}	
	private static void applyBasicEntityValues(Visualizacao visualizacao, JsonVisualizacao jsonVisualizacao) {
		visualizacao.setId(jsonVisualizacao.getId());
		visualizacao.setDataHora(jsonVisualizacao.getDataHora());
		visualizacao.setPercentualAssistido(jsonVisualizacao.getPercentualAssistido());
	}	
	
	public static JsonVisualizacao toJson(Visualizacao visualizacao) {
		if(visualizacao == null){
			return null;
		}
		
		JsonVisualizacao jsonVisualizacao = new JsonVisualizacao();
		
		applyBasicJsonValues(jsonVisualizacao, visualizacao);

		Filme filme_ = visualizacao.getFilme();
		if (filme_ != null) {
			jsonVisualizacao.setFilme(toBasicJson(filme_));
		}
		Assinante assinante_ = visualizacao.getAssinante();
		if (assinante_ != null) {
			jsonVisualizacao.setAssinante(toBasicJson(assinante_));
		}
		return jsonVisualizacao;
	}


	public static Visualizacao apply(Visualizacao visualizacao, JsonVisualizacao jsonVisualizacao) {
	
		if(visualizacao ==  null)
			visualizacao = new Visualizacao();
		
		applyBasicEntityValues(visualizacao, jsonVisualizacao) ;

		JsonFilme filme_ = jsonVisualizacao.getFilme();
		if (filme_ != null) {
			visualizacao.setFilme(toBasicEntity(filme_));
		}	
		JsonAssinante assinante_ = jsonVisualizacao.getAssinante();
		if (assinante_ != null) {
			visualizacao.setAssinante(toBasicEntity(assinante_));
		}	
		return visualizacao;
		
	}		
	public static Visualizacao toEntity(JsonVisualizacao jsonVisualizacao) {
		Visualizacao visualizacao = new Visualizacao();
		
		return apply(visualizacao, jsonVisualizacao);
	}		
	
	public static List<JsonVisualizacao> toListJsonVisualizacaos(List<Visualizacao> all) {
		List<JsonVisualizacao> jsonVisualizacaos = new ArrayList<JsonVisualizacao>();
		for (Visualizacao visualizacao : all) {
			jsonVisualizacaos.add(toJson(visualizacao));
		}
		return jsonVisualizacaos;
	}
	//converte de entidade para json --------------------
	private static JsonClassificacao toBasicJson(Classificacao classificacao) {
		JsonClassificacao jsonClassificacao = new JsonClassificacao();
		applyBasicJsonValues(jsonClassificacao, classificacao);
		return jsonClassificacao;
	}
	
	private static Classificacao toBasicEntity(JsonClassificacao jsonClassificacao) {
		Classificacao classificacao = new Classificacao();
		applyBasicEntityValues(classificacao, jsonClassificacao);
		return classificacao;
	}
	
	private static void applyBasicJsonValues(JsonClassificacao jsonClassificacao, Classificacao classificacao) {
		jsonClassificacao.setId(classificacao.getId());
	    jsonClassificacao.setIdadeMinima(classificacao.getIdadeMinima());
	    jsonClassificacao.setNome(classificacao.getNome());
	    jsonClassificacao.setDescricao(classificacao.getDescricao());
	}	
	private static void applyBasicEntityValues(Classificacao classificacao, JsonClassificacao jsonClassificacao) {
		classificacao.setId(jsonClassificacao.getId());
		classificacao.setIdadeMinima(jsonClassificacao.getIdadeMinima());
		classificacao.setNome(jsonClassificacao.getNome());
		classificacao.setDescricao(jsonClassificacao.getDescricao());
	}	
	
	public static JsonClassificacao toJson(Classificacao classificacao) {
		if(classificacao == null){
			return null;
		}
		
		JsonClassificacao jsonClassificacao = new JsonClassificacao();
		
		applyBasicJsonValues(jsonClassificacao, classificacao);

		return jsonClassificacao;
	}


	public static Classificacao apply(Classificacao classificacao, JsonClassificacao jsonClassificacao) {
	
		if(classificacao ==  null)
			classificacao = new Classificacao();
		
		applyBasicEntityValues(classificacao, jsonClassificacao) ;

		return classificacao;
		
	}		
	public static Classificacao toEntity(JsonClassificacao jsonClassificacao) {
		Classificacao classificacao = new Classificacao();
		
		return apply(classificacao, jsonClassificacao);
	}		
	
	public static List<JsonClassificacao> toListJsonClassificacaos(List<Classificacao> all) {
		List<JsonClassificacao> jsonClassificacaos = new ArrayList<JsonClassificacao>();
		for (Classificacao classificacao : all) {
			jsonClassificacaos.add(toJson(classificacao));
		}
		return jsonClassificacaos;
	}
	//converte de entidade para json --------------------
	private static JsonAtor toBasicJson(Ator ator) {
		JsonAtor jsonAtor = new JsonAtor();
		applyBasicJsonValues(jsonAtor, ator);
		return jsonAtor;
	}
	
	private static Ator toBasicEntity(JsonAtor jsonAtor) {
		Ator ator = new Ator();
		applyBasicEntityValues(ator, jsonAtor);
		return ator;
	}
	
	private static void applyBasicJsonValues(JsonAtor jsonAtor, Ator ator) {
		jsonAtor.setId(ator.getId());
	    jsonAtor.setBiografia(ator.getBiografia());
	    jsonAtor.setDataNascimento(ator.getDataNascimento());
	    jsonAtor.setNome(ator.getNome());
	    jsonAtor.setFoto(ator.getFoto());
	}	
	private static void applyBasicEntityValues(Ator ator, JsonAtor jsonAtor) {
		ator.setId(jsonAtor.getId());
		ator.setBiografia(jsonAtor.getBiografia());
		ator.setDataNascimento(jsonAtor.getDataNascimento());
		ator.setNome(jsonAtor.getNome());
		ator.setFoto(jsonAtor.getFoto());
	}	
	
	public static JsonAtor toJson(Ator ator) {
		if(ator == null){
			return null;
		}
		
		JsonAtor jsonAtor = new JsonAtor();
		
		applyBasicJsonValues(jsonAtor, ator);

		List<Filme> listFilmes = ator.getFilmes();
		if (listFilmes != null) {
			for (Filme loopFilme : listFilmes) {
				jsonAtor.getFilmes().add(toBasicJson(loopFilme));
			}
		}			

		return jsonAtor;
	}


	public static Ator apply(Ator ator, JsonAtor jsonAtor) {
	
		if(ator ==  null)
			ator = new Ator();
		
		applyBasicEntityValues(ator, jsonAtor) ;

		ArrayList<JsonFilme> listFilmes = jsonAtor.getFilmes();			
		if (listFilmes != null) {
			for (JsonFilme loopJsonFilme : listFilmes) {
				ator.addFilmes(toBasicEntity(loopJsonFilme));
			}
		}
			
		return ator;
		
	}		
	public static Ator toEntity(JsonAtor jsonAtor) {
		Ator ator = new Ator();
		
		return apply(ator, jsonAtor);
	}		
	
	public static List<JsonAtor> toListJsonAtors(List<Ator> all) {
		List<JsonAtor> jsonAtors = new ArrayList<JsonAtor>();
		for (Ator ator : all) {
			jsonAtors.add(toJson(ator));
		}
		return jsonAtors;
	}
	//converte de entidade para json --------------------
	private static JsonUser toBasicJson(User user) {
		JsonUser jsonUser = new JsonUser();
		applyBasicJsonValues(jsonUser, user);
		return jsonUser;
	}
	
	private static User toBasicEntity(JsonUser jsonUser) {
		User user = new User();
		applyBasicEntityValues(user, jsonUser);
		return user;
	}
	
	private static void applyBasicJsonValues(JsonUser jsonUser, User user) {
		jsonUser.setId(user.getId());
	    jsonUser.setName(user.getName());
	    jsonUser.setUsername(user.getUsername());
	    jsonUser.setEmail(user.getEmail());
	    jsonUser.setPassword(user.getPassword());
	    jsonUser.setEnable(user.getEnable());
	    jsonUser.setImage(user.getImage());
	}	
	private static void applyBasicEntityValues(User user, JsonUser jsonUser) {
		user.setId(jsonUser.getId());
		user.setName(jsonUser.getName());
		user.setUsername(jsonUser.getUsername());
		user.setEmail(jsonUser.getEmail());
		user.setPassword(jsonUser.getPassword());
		user.setEnable(jsonUser.getEnable());
		user.setImage(jsonUser.getImage());
	}	
	
	public static JsonUser toJson(User user) {
		if(user == null){
			return null;
		}
		
		JsonUser jsonUser = new JsonUser();
		
		applyBasicJsonValues(jsonUser, user);

		List<Role> listRoles = user.getRoles();
		if (listRoles != null) {
			for (Role loopRole : listRoles) {
				jsonUser.getRoles().add(toBasicJson(loopRole));
			}
		}

		return jsonUser;
	}


	public static User apply(User user, JsonUser jsonUser) {
	
		if(user ==  null)
			user = new User();
		
		applyBasicEntityValues(user, jsonUser) ;

		ArrayList<JsonRole> listRoles = jsonUser.getRoles();			
		if (listRoles != null) {
			for (JsonRole loopJsonRole : listRoles) {
				user.addRoles(toBasicEntity(loopJsonRole));
			}
		}
		return user;
		
	}		
	public static User toEntity(JsonUser jsonUser) {
		User user = new User();
		
		return apply(user, jsonUser);
	}		
	
	public static List<JsonUser> toListJsonUsers(List<User> all) {
		List<JsonUser> jsonUsers = new ArrayList<JsonUser>();
		for (User user : all) {
			jsonUsers.add(toJson(user));
		}
		return jsonUsers;
	}
	//converte de entidade para json --------------------
	private static JsonRole toBasicJson(Role role) {
		JsonRole jsonRole = new JsonRole();
		applyBasicJsonValues(jsonRole, role);
		return jsonRole;
	}
	
	private static Role toBasicEntity(JsonRole jsonRole) {
		Role role = new Role();
		applyBasicEntityValues(role, jsonRole);
		return role;
	}
	
	private static void applyBasicJsonValues(JsonRole jsonRole, Role role) {
		jsonRole.setId(role.getId());
	    jsonRole.setAuthority(role.getAuthority());
	    jsonRole.setDescription(role.getDescription());
	}	
	private static void applyBasicEntityValues(Role role, JsonRole jsonRole) {
		role.setId(jsonRole.getId());
		role.setAuthority(jsonRole.getAuthority());
		role.setDescription(jsonRole.getDescription());
	}	
	
	public static JsonRole toJson(Role role) {
		if(role == null){
			return null;
		}
		
		JsonRole jsonRole = new JsonRole();
		
		applyBasicJsonValues(jsonRole, role);

		List<User> listUsers = role.getUsers();
		if (listUsers != null) {
			for (User loopUser : listUsers) {
				jsonRole.getUsers().add(toBasicJson(loopUser));
			}
		}			

		List<Permission> listPermissions = role.getPermissions();
		if (listPermissions != null) {
			for (Permission loopPermission : listPermissions) {
				jsonRole.getPermissions().add(toBasicJson(loopPermission));
			}
		}

		List<Group> listGroups = role.getGroups();
		if (listGroups != null) {
			for (Group loopGroup : listGroups) {
				jsonRole.getGroups().add(toBasicJson(loopGroup));
			}
		}

		return jsonRole;
	}


	public static Role apply(Role role, JsonRole jsonRole) {
	
		if(role ==  null)
			role = new Role();
		
		applyBasicEntityValues(role, jsonRole) ;

		ArrayList<JsonUser> listUsers = jsonRole.getUsers();			
		if (listUsers != null) {
			for (JsonUser loopJsonUser : listUsers) {
				role.addUsers(toBasicEntity(loopJsonUser));
			}
		}
			
		ArrayList<JsonPermission> listPermissions = jsonRole.getPermissions();			
		if (listPermissions != null) {
			for (JsonPermission loopJsonPermission : listPermissions) {
				role.addPermissions(toBasicEntity(loopJsonPermission));
			}
		}
		ArrayList<JsonGroup> listGroups = jsonRole.getGroups();			
		if (listGroups != null) {
			for (JsonGroup loopJsonGroup : listGroups) {
				role.addGroups(toBasicEntity(loopJsonGroup));
			}
		}
		return role;
		
	}		
	public static Role toEntity(JsonRole jsonRole) {
		Role role = new Role();
		
		return apply(role, jsonRole);
	}		
	
	public static List<JsonRole> toListJsonRoles(List<Role> all) {
		List<JsonRole> jsonRoles = new ArrayList<JsonRole>();
		for (Role role : all) {
			jsonRoles.add(toJson(role));
		}
		return jsonRoles;
	}
	//converte de entidade para json --------------------
	private static JsonPermission toBasicJson(Permission permission) {
		JsonPermission jsonPermission = new JsonPermission();
		applyBasicJsonValues(jsonPermission, permission);
		return jsonPermission;
	}
	
	private static Permission toBasicEntity(JsonPermission jsonPermission) {
		Permission permission = new Permission();
		applyBasicEntityValues(permission, jsonPermission);
		return permission;
	}
	
	private static void applyBasicJsonValues(JsonPermission jsonPermission, Permission permission) {
		jsonPermission.setId(permission.getId());
	    jsonPermission.setName(permission.getName());
	    jsonPermission.setDescription(permission.getDescription());
	    jsonPermission.setOperation(permission.getOperation());
	    jsonPermission.setTagReminder(permission.getTagReminder());
	}	
	private static void applyBasicEntityValues(Permission permission, JsonPermission jsonPermission) {
		permission.setId(jsonPermission.getId());
		permission.setName(jsonPermission.getName());
		permission.setDescription(jsonPermission.getDescription());
		permission.setOperation(jsonPermission.getOperation());
		permission.setTagReminder(jsonPermission.getTagReminder());
	}	
	
	public static JsonPermission toJson(Permission permission) {
		if(permission == null){
			return null;
		}
		
		JsonPermission jsonPermission = new JsonPermission();
		
		applyBasicJsonValues(jsonPermission, permission);

		List<Role> listRoles = permission.getRoles();
		if (listRoles != null) {
			for (Role loopRole : listRoles) {
				jsonPermission.getRoles().add(toBasicJson(loopRole));
			}
		}			

		List<Group> listGroups = permission.getGroups();
		if (listGroups != null) {
			for (Group loopGroup : listGroups) {
				jsonPermission.getGroups().add(toBasicJson(loopGroup));
			}
		}			

		Item item_ = permission.getItem();
		if (item_ != null) {
			jsonPermission.setItem(toBasicJson(item_));
		}
		return jsonPermission;
	}


	public static Permission apply(Permission permission, JsonPermission jsonPermission) {
	
		if(permission ==  null)
			permission = new Permission();
		
		applyBasicEntityValues(permission, jsonPermission) ;

		ArrayList<JsonRole> listRoles = jsonPermission.getRoles();			
		if (listRoles != null) {
			for (JsonRole loopJsonRole : listRoles) {
				permission.addRoles(toBasicEntity(loopJsonRole));
			}
		}
			
		ArrayList<JsonGroup> listGroups = jsonPermission.getGroups();			
		if (listGroups != null) {
			for (JsonGroup loopJsonGroup : listGroups) {
				permission.addGroups(toBasicEntity(loopJsonGroup));
			}
		}
			
		JsonItem item_ = jsonPermission.getItem();
		if (item_ != null) {
			permission.setItem(toBasicEntity(item_));
		}	
		return permission;
		
	}		
	public static Permission toEntity(JsonPermission jsonPermission) {
		Permission permission = new Permission();
		
		return apply(permission, jsonPermission);
	}		
	
	public static List<JsonPermission> toListJsonPermissions(List<Permission> all) {
		List<JsonPermission> jsonPermissions = new ArrayList<JsonPermission>();
		for (Permission permission : all) {
			jsonPermissions.add(toJson(permission));
		}
		return jsonPermissions;
	}
	//converte de entidade para json --------------------
	private static JsonGroup toBasicJson(Group group) {
		JsonGroup jsonGroup = new JsonGroup();
		applyBasicJsonValues(jsonGroup, group);
		return jsonGroup;
	}
	
	private static Group toBasicEntity(JsonGroup jsonGroup) {
		Group group = new Group();
		applyBasicEntityValues(group, jsonGroup);
		return group;
	}
	
	private static void applyBasicJsonValues(JsonGroup jsonGroup, Group group) {
		jsonGroup.setId(group.getId());
	    jsonGroup.setName(group.getName());
	    jsonGroup.setDescription(group.getDescription());
	}	
	private static void applyBasicEntityValues(Group group, JsonGroup jsonGroup) {
		group.setId(jsonGroup.getId());
		group.setName(jsonGroup.getName());
		group.setDescription(jsonGroup.getDescription());
	}	
	
	public static JsonGroup toJson(Group group) {
		if(group == null){
			return null;
		}
		
		JsonGroup jsonGroup = new JsonGroup();
		
		applyBasicJsonValues(jsonGroup, group);

		List<Role> listRoles = group.getRoles();
		if (listRoles != null) {
			for (Role loopRole : listRoles) {
				jsonGroup.getRoles().add(toBasicJson(loopRole));
			}
		}			

		List<Permission> listPermissions = group.getPermissions();
		if (listPermissions != null) {
			for (Permission loopPermission : listPermissions) {
				jsonGroup.getPermissions().add(toBasicJson(loopPermission));
			}
		}

		return jsonGroup;
	}


	public static Group apply(Group group, JsonGroup jsonGroup) {
	
		if(group ==  null)
			group = new Group();
		
		applyBasicEntityValues(group, jsonGroup) ;

		ArrayList<JsonRole> listRoles = jsonGroup.getRoles();			
		if (listRoles != null) {
			for (JsonRole loopJsonRole : listRoles) {
				group.addRoles(toBasicEntity(loopJsonRole));
			}
		}
			
		ArrayList<JsonPermission> listPermissions = jsonGroup.getPermissions();			
		if (listPermissions != null) {
			for (JsonPermission loopJsonPermission : listPermissions) {
				group.addPermissions(toBasicEntity(loopJsonPermission));
			}
		}
		return group;
		
	}		
	public static Group toEntity(JsonGroup jsonGroup) {
		Group group = new Group();
		
		return apply(group, jsonGroup);
	}		
	
	public static List<JsonGroup> toListJsonGroups(List<Group> all) {
		List<JsonGroup> jsonGroups = new ArrayList<JsonGroup>();
		for (Group group : all) {
			jsonGroups.add(toJson(group));
		}
		return jsonGroups;
	}
	//converte de entidade para json --------------------
	private static JsonItem toBasicJson(Item item) {
		JsonItem jsonItem = new JsonItem();
		applyBasicJsonValues(jsonItem, item);
		return jsonItem;
	}
	
	private static Item toBasicEntity(JsonItem jsonItem) {
		Item item = new Item();
		applyBasicEntityValues(item, jsonItem);
		return item;
	}
	
	private static void applyBasicJsonValues(JsonItem jsonItem, Item item) {
		jsonItem.setId(item.getId());
	    jsonItem.setName(item.getName());
	    jsonItem.setItemType(item.getItemType());
	    jsonItem.setIdentifier(item.getIdentifier());
	    jsonItem.setDescription(item.getDescription());
	}	
	private static void applyBasicEntityValues(Item item, JsonItem jsonItem) {
		item.setId(jsonItem.getId());
		item.setName(jsonItem.getName());
		item.setItemType(jsonItem.getItemType());
		item.setIdentifier(jsonItem.getIdentifier());
		item.setDescription(jsonItem.getDescription());
	}	
	
	public static JsonItem toJson(Item item) {
		if(item == null){
			return null;
		}
		
		JsonItem jsonItem = new JsonItem();
		
		applyBasicJsonValues(jsonItem, item);

		List<Permission> listPermissions = item.getPermissions();
		if (listPermissions != null) {
			for (Permission loopPermission : listPermissions) {
				jsonItem.getPermissions().add(toBasicJson(loopPermission));
			}
		}
		return jsonItem;
	}


	public static Item apply(Item item, JsonItem jsonItem) {
	
		if(item ==  null)
			item = new Item();
		
		applyBasicEntityValues(item, jsonItem) ;

		ArrayList<JsonPermission> listPermissions = jsonItem.getPermissions();
		if (listPermissions != null) {
			for (JsonPermission loopJsonPermission : listPermissions) {
				item.addPermissions(toBasicEntity(loopJsonPermission));
			}
		}
					
		return item;
		
	}		
	public static Item toEntity(JsonItem jsonItem) {
		Item item = new Item();
		
		return apply(item, jsonItem);
	}		
	
	public static List<JsonItem> toListJsonItems(List<Item> all) {
		List<JsonItem> jsonItems = new ArrayList<JsonItem>();
		for (Item item : all) {
			jsonItems.add(toJson(item));
		}
		return jsonItems;
	}
}
//generated by JSetup v0.95 :  at 23 de jun de 2021 23:11:06